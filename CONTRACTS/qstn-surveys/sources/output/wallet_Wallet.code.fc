#pragma version =0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

int __tact_my_balance() inline {
    return pair_first(get_balance());
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) "DICTDEL";

((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETREF";

(slice, int) __tact_dict_get(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGETREF" "NULLSWAPIFNOT";

global (int, slice, int, slice) __tact_context;
global cell __tact_context_sys;

(int, slice, int, slice) __tact_context_get() inline { return __tact_context; }

() __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() != 267);
}

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    __tact_verify_address(raw);
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    __tact_verify_address(address);
    b = b.store_slice(address);
    return b;
}

(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return __tact_dict_set_ref(d, kl, k, v);
    }
}

cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get_ref(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(135, ok);
    return data;
}

forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v) asm "2 TUPLE";

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm "2 UNTUPLE";

slice __tact_float_to_string(int src, int digits) inline_ref {
    throw_if(134, (digits <= 0) | (digits > 77));
    builder b = begin_cell();

    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }

    ;; Process rem part
    int skip = true;
    int len = 0;
    int rem = 0;
    tuple t = empty_tuple();
    repeat(digits) {
        (src, rem) = src.divmod(10);
        if ( ~ ( skip & ( rem == 0 ) ) ) {
            skip = false;
            t~tpush(rem + 48);
            len = len + 1;
        }
    }

    ;; Process dot
    if (~ skip) {
        t~tpush(46);
        len = len + 1;
    }

    ;; Main
    do {
        (src, rem) = src.divmod(10);
        t~tpush(rem + 48);
        len = len + 1;
    } until (src == 0);

    ;; Assemble
    int c = len - 1;
    repeat(len) {
        int v = t.at(c);
        b = b.store_uint(v, 8);
        c = c - 1;
    }

    ;; Result
    return b.end_cell().begin_parse();
}

builder __gen_write_Participant(builder build_0, (int, slice) v) inline {
    var (v'fillno, v'uservault) = v;
    build_0 = build_0.store_uint(v'fillno, 32);
    build_0 = __tact_store_address(build_0, v'uservault);
    return build_0;
}

cell __gen_writecell_Participant((int, slice) v) inline_ref {
    return __gen_write_Participant(begin_cell(), v).end_cell();
}

(slice, ((int, slice))) __gen_read_Participant(slice sc_0) inline {
    var v'fillno = sc_0~load_uint(32);
    var v'uservault = sc_0~__tact_load_address();
    return (sc_0, (v'fillno, v'uservault));
}

tuple __gen_Participant_as_optional(((int, slice)) v) inline {
    var (v'fillno, v'uservault) = v;
    return __tact_tuple_create_2(v'fillno, v'uservault);
}

tuple __gen_readopt_Participant(cell cl) inline_ref {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return __gen_Participant_as_optional(sc~__gen_read_Participant());
}

builder __gen_write_Transfer(builder build_0, (int, int, slice, int, cell) v) inline {
    var (v'seqno, v'mode, v'to, v'amount, v'body) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_uint(v'mode, 8);
    build_0 = __tact_store_address(build_0, v'to);
    build_0 = build_0.store_coins(v'amount);
    build_0 = ~ null?(v'body) ? build_0.store_int(true, 1).store_ref(v'body) : build_0.store_int(false, 1);
    return build_0;
}

cell __gen_writecell_Transfer((int, int, slice, int, cell) v) inline_ref {
    return __gen_write_Transfer(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice, int, cell))) __gen_read_Transfer(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'mode = sc_0~load_uint(8);
    var v'to = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    var v'body = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'seqno, v'mode, v'to, v'amount, v'body));
}

(slice, ((slice, slice, int))) __gen_read_AddParticipant(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3344036631);
    var v'user = sc_0~__tact_load_address();
    var v'uservault = sc_0~__tact_load_address();
    var v'resultsid = sc_0~load_uint(32);
    return (sc_0, (v'user, v'uservault, v'resultsid));
}

(slice, ((int, slice))) __gen_read_Reward(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 731158516);
    var v'amount = sc_0~load_coins();
    var v'participant = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'participant));
}

(slice, ((slice, (int, int, slice, int, cell)))) __gen_read_TransferMessage(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 123);
    var v'signature = sc_0~load_ref().begin_parse();
    var v'transfer = sc_0~__gen_read_Transfer();
    return (sc_0, (v'signature, v'transfer));
}

(slice, ((slice, int))) __gen_read_New(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3674000335);
    var v'owner = sc_0~__tact_load_address();
    var v'limit = sc_0~load_uint(32);
    return (sc_0, (v'owner, v'limit));
}

(slice, ((int))) __gen_read_Withdraw(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 195467089);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

builder __gen_write_Wallet(builder build_0, (int, slice, int, int, int, cell, cell) v) inline {
    var (v'limit, v'owner, v'seqno, v'key, v'walletId, v'participants, v'rewarded) = v;
    build_0 = build_0.store_uint(v'limit, 32);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_uint(v'key, 256);
    build_0 = build_0.store_uint(v'walletId, 64);
    build_0 = build_0.store_dict(v'participants);
    build_0 = build_0.store_dict(v'rewarded);
    return build_0;
}

(slice, ((int, slice, int, int, int, cell, cell))) __gen_read_Wallet(slice sc_0) inline {
    var v'limit = sc_0~load_uint(32);
    var v'owner = sc_0~__tact_load_address();
    var v'seqno = sc_0~load_uint(32);
    var v'key = sc_0~load_uint(256);
    var v'walletId = sc_0~load_uint(64);
    var v'participants = sc_0~load_dict();
    var v'rewarded = sc_0~load_dict();
    return (sc_0, (v'limit, v'owner, v'seqno, v'key, v'walletId, v'participants, v'rewarded));
}

_ __gen_Context_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

((int, slice)) __gen_Participant_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'fillno, slice vvv'uservault) = __tact_tuple_destroy_2(v);
    return (vvv'fillno, vvv'uservault);
}

(int, slice, int, int, int, cell, cell) __gen_load_Wallet() inline {
    slice sc = get_data().begin_parse();
    __tact_context_sys = sc~load_ref();
    return sc~__gen_read_Wallet();
}

() __gen_store_Wallet((int, slice, int, int, int, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = __gen_write_Wallet(b, v);
    set_data(b.end_cell());
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

slice $__gen_Int_toCoinsString(int $self) impure inline_ref {
    var ($self) = $self;
    return __tact_float_to_string($self, 9);
}

cell $__gen_Wallet_init(cell sys', int $key, int $walletId, slice $owner, int $limit) {
    var (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded)) = (0, null(), 0, null(), null(), null(), null());
    $self'key = $key;
    $self'walletId = $walletId;
    $self'owner = $owner;
    $self'limit = $limit;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_Wallet(b', ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded));
    return b'.end_cell();
}

(cell, cell) $__gen_Wallet_init_child(cell sys', int $key, int $walletId, slice $owner, int $limit) {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Wallet
    cell mine = __tact_dict_get_code(source, 14718);
    contracts = __tact_dict_set_code(contracts, 14718, mine);
    cell sys = begin_cell().store_dict(contracts).end_cell();
    return (mine, $__gen_Wallet_init(sys, $key, $walletId, $owner, $limit));
}

int $__gen_Wallet_isParticipant((int, slice, int, int, int, cell, cell) $self, slice $key) impure inline_ref {
    var (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded)) = $self;
    if (null?(__gen_readopt_Participant(__tact_dict_get_slice_cell($self'participants, 267, $key)))) {
        return false;
    } else {
        return true;
    }
}

_ $__gen_get_isParticipant(slice $$key) method_id(73567) {
    slice $key = $$key;
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_isParticipant(self, $key);
    return res;
}

int $__gen_Wallet_isRewardReceived((int, slice, int, int, int, cell, cell) $self, slice $key) impure inline_ref {
    var (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded)) = $self;
    return __tact_dict_get_slice_int($self'rewarded, 267, $key, 1);
}

_ $__gen_get_isRewardReceived(slice $$key) method_id(108531) {
    slice $key = $$key;
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_isRewardReceived(self, $key);
    return res;
}

slice $__gen_Wallet_balance((int, slice, int, int, int, cell, cell) $self) impure inline_ref {
    var (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded)) = $self;
    return $__gen_Int_toCoinsString(__tact_my_balance());
}

_ $__gen_get_balance() method_id(104128) {
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_balance(self);
    return res;
}

int $__gen_Wallet_publicKey((int, slice, int, int, int, cell, cell) $self) impure inline_ref {
    var (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded)) = $self;
    return $self'key;
}

_ $__gen_get_publicKey() method_id(86520) {
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_publicKey(self);
    return res;
}

int $__gen_Wallet_walletId((int, slice, int, int, int, cell, cell) $self) impure inline_ref {
    var (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded)) = $self;
    return $self'walletId;
}

_ $__gen_get_walletId() method_id(114762) {
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_walletId(self);
    return res;
}

int $__gen_Wallet_seqno((int, slice, int, int, int, cell, cell) $self) impure inline_ref {
    var (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded)) = $self;
    return $self'seqno;
}

_ $__gen_get_seqno() method_id(85143) {
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_seqno(self);
    return res;
}

cell $__gen_Wallet_allParticipants((int, slice, int, int, int, cell, cell) $self) impure inline_ref {
    var (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded)) = $self;
    return $self'participants;
}

_ $__gen_get_allParticipants() method_id(113385) {
    var self = __gen_load_Wallet();
    var res = $__gen_Wallet_allParticipants(self);
    return res;
}

((int, slice, int, int, int, cell, cell), ()) $__gen_Wallet_receive_comment_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246((int, slice, int, int, int, cell, cell) $self) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

(((int, slice, int, int, int, cell, cell)), ()) $__gen_Wallet_receive_TransferMessage((int, slice, int, int, int, cell, cell) $self, (slice, (int, int, slice, int, cell)) $msg) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    var ($msg'signature, ($msg'transfer'seqno, $msg'transfer'mode, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'body)) = $msg;
    int $op_hash = cell_hash(__gen_writecell_Transfer(($msg'transfer'seqno, $msg'transfer'mode, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'body)));
    throw_unless(48401, check_signature($op_hash, $msg'signature, $self'key));
    throw_unless(17654, ($msg'transfer'seqno == $self'seqno));
    $self'seqno = ($self'seqno + 1);
    $send((true, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'mode, $msg'transfer'body, null(), null()));
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

(((int, slice, int, int, int, cell, cell)), ()) $__gen_Wallet_receive_AddParticipant((int, slice, int, int, int, cell, cell) $self, (slice, slice, int) $msg) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    var ($msg'user, $msg'uservault, $msg'resultsid) = $msg;
    slice $user = $msg'user;
    slice $userVault = $msg'uservault;
    int $resultsId = $msg'resultsid;
    $self'participants~__tact_dict_set_slice_cell(267, $user, __gen_writecell_Participant(($resultsId, $userVault)));
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

((int, slice, int, int, int, cell, cell), ()) $__gen_Wallet_receive_fallback((int, slice, int, int, int, cell, cell) $self, slice $msg) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    $self'seqno = ($self'seqno + 1);
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

((int, slice, int, int, int, cell, cell), ()) $__gen_Wallet_receive_comment_0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2((int, slice, int, int, int, cell, cell) $self) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    $self'seqno = ($self'seqno + 1);
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

(((int, slice, int, int, int, cell, cell)), ()) $__gen_Wallet_receive_New((int, slice, int, int, int, cell, cell) $self, (slice, int) $msg) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    var ($msg'owner, $msg'limit) = $msg;
    slice $owner = $msg'owner;
    int $limit = $msg'limit;
    var ($walletInit'code, $walletInit'data) = $__gen_Wallet_init_child(__tact_context_sys, $self'key, ($self'walletId + 1), $owner, $limit);
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

((int, slice, int, int, int, cell, cell), ()) $__gen_Wallet_receive_bounced((int, slice, int, int, int, cell, cell) $self, slice $msg) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

((int, slice, int, int, int, cell, cell), ()) $__gen_Wallet_receive_comment_5092b5dce0715a57dd969f5fb5a6f93025a0b02eab329470ca2b365ca0d7e93a((int, slice, int, int, int, cell, cell) $self) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    $send((true, $self'owner, 0, (128 + 2), null(), null(), null()));
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

((int, slice, int, int, int, cell, cell), ()) $__gen_Wallet_receive_comment_beb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec((int, slice, int, int, int, cell, cell) $self) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    $send((true, $self'owner, ((__tact_my_balance() - __gen_Context_get_value(__tact_context_get())) - 10000000), (64 + 2), null(), null(), null()));
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

(((int, slice, int, int, int, cell, cell)), ()) $__gen_Wallet_receive_Withdraw((int, slice, int, int, int, cell, cell) $self, (int) $msg) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    var ($msg'amount) = $msg;
    int $amount = min($msg'amount, ((__tact_my_balance() - __gen_Context_get_value(__tact_context_get())) - 10000000));
    throw_unless(54615, ($amount > 0));
    $send((true, $self'owner, $amount, (64 + 2), null(), null(), null()));
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}

(((int, slice, int, int, int, cell, cell)), ()) $__gen_Wallet_receive_Reward((int, slice, int, int, int, cell, cell) $self, (int, slice) $msg) impure inline {
    var ($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded) = $self;
    var ($msg'amount, $msg'participant) = $msg;
    int $amount = min($msg'amount, ((__tact_my_balance() - __gen_Context_get_value(__tact_context_get())) - 10000000));
    slice $participant = $msg'participant;
    throw_unless(5042, (~ null?(__gen_readopt_Participant(__tact_dict_get_slice_cell($self'participants, 267, $participant)))));
    throw_unless(8210, null?(__tact_dict_get_slice_int($self'rewarded, 267, $participant, 1)));
    var ($isparticipant'fillno, $isparticipant'uservault) = __gen_Participant_not_null(__gen_readopt_Participant(__tact_dict_get_slice_cell($self'participants, 267, $participant)));
    slice $uservault = $isparticipant'uservault;
    throw_unless(54615, ($amount > 0));
    $send((true, $uservault, $amount, (64 + 2), null(), null(), null()));
    $self'rewarded~__tact_dict_set_slice_int(267, $participant, true, 1);
    return (($self'limit, $self'owner, $self'seqno, $self'key, $self'walletId, $self'participants, $self'rewarded), ());
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    
    ;; Handle bounced messages
    if (msg_bounced) {
        var self = __gen_load_Wallet();
        self~$__gen_Wallet_receive_bounced(in_msg);
        __gen_store_Wallet(self);
        return ();
    }
    
    ;; Receive TransferMessage message
    if (op == 123) {
        var self = __gen_load_Wallet();
        var msg = in_msg~__gen_read_TransferMessage();
        self~$__gen_Wallet_receive_TransferMessage(msg);
        __gen_store_Wallet(self);
        return ();
    }
    
    ;; Receive AddParticipant message
    if (op == 3344036631) {
        var self = __gen_load_Wallet();
        var msg = in_msg~__gen_read_AddParticipant();
        self~$__gen_Wallet_receive_AddParticipant(msg);
        __gen_store_Wallet(self);
        return ();
    }
    
    ;; Receive New message
    if (op == 3674000335) {
        var self = __gen_load_Wallet();
        var msg = in_msg~__gen_read_New();
        self~$__gen_Wallet_receive_New(msg);
        __gen_store_Wallet(self);
        return ();
    }
    
    ;; Receive Withdraw message
    if (op == 195467089) {
        var self = __gen_load_Wallet();
        var msg = in_msg~__gen_read_Withdraw();
        self~$__gen_Wallet_receive_Withdraw(msg);
        __gen_store_Wallet(self);
        return ();
    }
    
    ;; Receive Reward message
    if (op == 731158516) {
        var self = __gen_load_Wallet();
        var msg = in_msg~__gen_read_Reward();
        self~$__gen_Wallet_receive_Reward(msg);
        __gen_store_Wallet(self);
        return ();
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Deploy" message
        if (text_op == 0x85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246) {
            var self = __gen_load_Wallet();
            self~$__gen_Wallet_receive_comment_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246();
            __gen_store_Wallet(self);
            return ();
        }
        
        ;; Receive "notify" message
        if (text_op == 0x0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2) {
            var self = __gen_load_Wallet();
            self~$__gen_Wallet_receive_comment_0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2();
            __gen_store_Wallet(self);
            return ();
        }
        
        ;; Receive "withdraw all" message
        if (text_op == 0x5092b5dce0715a57dd969f5fb5a6f93025a0b02eab329470ca2b365ca0d7e93a) {
            var self = __gen_load_Wallet();
            self~$__gen_Wallet_receive_comment_5092b5dce0715a57dd969f5fb5a6f93025a0b02eab329470ca2b365ca0d7e93a();
            __gen_store_Wallet(self);
            return ();
        }
        
        ;; Receive "withdraw safe" message
        if (text_op == 0xbeb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec) {
            var self = __gen_load_Wallet();
            self~$__gen_Wallet_receive_comment_beb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec();
            __gen_store_Wallet(self);
            return ();
        }
    }
    
    ;; Receiver fallback
    var self = __gen_load_Wallet();
    self~$__gen_Wallet_receive_fallback(in_msg);
    __gen_store_Wallet(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmUVCTcafeZZPAe9anG6YvnAPuR2XpPvYnf1VP8GQifoKa";
}